package loginandsignup;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.Vector;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.io.File;
import java.io.IOException;
import javax.swing.filechooser.FileNameExtensionFilter;
import loginandsignup.Login;
import loginandsignup.ProductManagement;
import loginandsignup.SalesHistory;

/**
 *
 * @author Rahemet
 */
public class Home extends javax.swing.JFrame {
    private DefaultTableModel cartTableModel;
    private JTable cartTable;
    private JPanel menuPanel;
    private JLabel totalLabel;
    private double total = 0.0;
    private DecimalFormat df = new DecimalFormat("#,##0.00");
    private JPanel categoryPanel;
    private CardLayout cardLayout;
    private JPanel menuCardsPanel;
    private Color PRIMARY_COLOR = new Color(26, 155, 118); // Modern green color
    private Color SECONDARY_COLOR = new Color(240, 240, 240); // Light gray
    private Color ACCENT_COLOR = new Color(52, 191, 163); // Lighter green
    private Color TEXT_COLOR = new Color(51, 51, 51); // Dark gray for text
    private Color BORDER_COLOR = new Color(230, 230, 230); // Light border color
    private JButton confirmBtn;
    private String selectedPaymentMethod = null;
    private JTextField vatField;
    private JTextField taxField;
    private JCheckBox pwdCheck;
    private JCheckBox seniorCheck;
    private JRadioButton pwdRadio;
    private JRadioButton seniorRadio;
    private ButtonGroup discountGroup;
    private JTextField pwdPercentField;
    private JTextField seniorPercentField;
    private int userId = 1;
    private JLabel subtotalLabel;
    private JLabel vatBreakdownLabel;
    private JLabel taxBreakdownLabel;
    private JLabel discountBreakdownLabel;
    private JLabel grandTotalBreakdownLabel;

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        setupModernPOSInterface();
        loadCategories();
    }

    public Home(int userId) {
        this.userId = userId;
        initComponents();
        setupModernPOSInterface();
        loadCategories();
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        user = new javax.swing.JLabel();
        LogoutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HOME");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Welcome Back");

        user.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        user.setForeground(new java.awt.Color(0, 51, 102));
        user.setText("John");

        LogoutBtn.setText("ðŸšª LOGOUT");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LogoutBtn))))
                .addGap(124, 124, 124))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(164, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        // TODO add your handling code here:
        
        Login LoginFrame = new Login();
        LoginFrame.setVisible(true);
        LoginFrame.pack();
        LoginFrame.setLocationRelativeTo(null); 
        this.dispose();
    }//GEN-LAST:event_LogoutBtnActionPerformed
    
    public void setUser(String name){
        user.setText(name);
    }
    
    /**
     * @param args the command line arguments
     */
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables

    private void setupModernPOSInterface() {
        // Main panel setup
        getContentPane().removeAll();
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(1366, 768));
        getContentPane().setBackground(Color.WHITE);

        // Top panel with logo, search, and order type
        JPanel topPanel = createTopPanel();
        add(topPanel, BorderLayout.NORTH);

        // Main content panel
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();

        // Left panel - Categories and Menu Items
        JPanel leftPanel = createMenuPanel();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.7;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(leftPanel, gbc);

        // Right panel - Cart and Checkout
        JPanel rightPanel = createCartPanel();
        gbc.gridx = 1;
        gbc.weightx = 0.3;
        mainPanel.add(rightPanel, gbc);

        add(mainPanel, BorderLayout.CENTER);
        
        pack();
        setLocationRelativeTo(null);
    }

    private JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new BorderLayout(20, 10));
        topPanel.setBackground(Color.WHITE);
        topPanel.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));

        // Left side - Logo and Restaurant name
        JPanel logoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        logoPanel.setOpaque(false);
        
        // Restaurant logo
        JLabel logoLabel = new JLabel("\u2302"); // House symbol
        logoLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        logoLabel.setForeground(PRIMARY_COLOR);
        
        // Restaurant name and date
        JPanel namePanel = new JPanel();
        namePanel.setLayout(new BoxLayout(namePanel, BoxLayout.Y_AXIS));
        namePanel.setOpaque(false);
        
        JLabel restaurantLabel = new JLabel("G Restaurant");
        restaurantLabel.setFont(new Font("Segoe UI", Font.BOLD, 18));
        restaurantLabel.setForeground(TEXT_COLOR);
        
        JLabel dateLabel = new JLabel(java.time.LocalDate.now().toString());
        dateLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        dateLabel.setForeground(Color.GRAY);
        
        namePanel.add(restaurantLabel);
        namePanel.add(dateLabel);
        
        logoPanel.add(logoLabel);
        logoPanel.add(namePanel);
        topPanel.add(logoPanel, BorderLayout.WEST);

        // Center - Search bar
        JPanel searchPanel = new JPanel(new BorderLayout());
        searchPanel.setOpaque(false);
        searchPanel.setBorder(BorderFactory.createEmptyBorder(0, 100, 0, 100));
        
        JTextField searchField = new JTextField();
        searchField.setPreferredSize(new Dimension(300, 40));
        searchField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(BORDER_COLOR, 1, true),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        searchField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        searchPanel.add(searchField, BorderLayout.CENTER);
        
        topPanel.add(searchPanel, BorderLayout.CENTER);

        // Right side - Management buttons
        JPanel managementPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        managementPanel.setOpaque(false);
        
        // Home button
        JButton homeBtn = new JButton("\u2302 Home"); // House symbol
        styleButton(homeBtn, true);
        homeBtn.addActionListener(e -> refreshProducts());
        
        // Sales History button
        JButton salesHistoryBtn = new JButton("\u2630 History"); // Three horizontal lines
        styleButton(salesHistoryBtn, false);
        salesHistoryBtn.addActionListener(e -> showSalesHistory());
        
        // Product Management button
        JButton productManagementBtn = new JButton("\u2699 Products"); // Gear symbol
        styleButton(productManagementBtn, false);
        productManagementBtn.addActionListener(e -> showProductManagement());
        
        managementPanel.add(homeBtn);
        managementPanel.add(salesHistoryBtn);
        managementPanel.add(productManagementBtn);
        
        topPanel.add(managementPanel, BorderLayout.EAST);

        return topPanel;
    }

    private void styleButton(JButton button, boolean isPrimary) {
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        if (isPrimary) {
            button.setForeground(Color.WHITE);
            button.setBackground(PRIMARY_COLOR);
            button.setBorder(BorderFactory.createLineBorder(PRIMARY_COLOR));
        } else {
            button.setForeground(TEXT_COLOR);
            button.setBackground(Color.WHITE);
            button.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
        }
        button.setPreferredSize(new Dimension(button.getText().length() * 10, 35));
        button.setFocusPainted(false);
    }

    private JPanel createMenuPanel() {
        JPanel mainPanel = new JPanel(new BorderLayout(0, 10));  // Reduced spacing
        mainPanel.setBackground(Color.WHITE);
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 10));

        // Title
        JLabel titleLabel = new JLabel("Find The Best Food");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(TEXT_COLOR);

        // Create a panel for title and categories
        JPanel topSection = new JPanel(new BorderLayout());
        topSection.setBackground(Color.WHITE);
        topSection.add(titleLabel, BorderLayout.NORTH);

        // Categories
        categoryPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        categoryPanel.setBackground(Color.WHITE);
        categoryPanel.setBorder(BorderFactory.createEmptyBorder(15, 0, 15, 0));  // Add padding
        topSection.add(categoryPanel, BorderLayout.CENTER);

        mainPanel.add(topSection, BorderLayout.NORTH);

        // Menu items using CardLayout
        cardLayout = new CardLayout();
        menuCardsPanel = new JPanel(cardLayout);
        menuCardsPanel.setBackground(Color.WHITE);
        mainPanel.add(menuCardsPanel, BorderLayout.CENTER);  // Changed from SOUTH to CENTER

        return mainPanel;
    }

    private JButton createCategoryButton(String category) {
        JButton button = new JButton(category);
        button.setFont(new Font("Segoe UI", Font.BOLD, 13));
        button.setForeground(TEXT_COLOR);
        button.setBackground(Color.WHITE);
        button.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setPreferredSize(new Dimension(100, 35));

        button.addActionListener(e -> {
            cardLayout.show(menuCardsPanel, category);
            // Update button styles
            for (Component c : categoryPanel.getComponents()) {
                if (c instanceof JButton) {
                    JButton b = (JButton)c;
                    b.setBackground(Color.WHITE);
                    b.setForeground(TEXT_COLOR);
                    b.setBorder(BorderFactory.createLineBorder(BORDER_COLOR));
                }
            }
            button.setBackground(PRIMARY_COLOR);
            button.setForeground(Color.WHITE);
            button.setBorder(BorderFactory.createLineBorder(PRIMARY_COLOR));
        });

        return button;
    }

    private JPanel createMenuItemPanel(int id, String name, double price, String description) {
        // Main panel with fixed height
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createLineBorder(BORDER_COLOR, 1));
        panel.setPreferredSize(new Dimension(260, 355));  // Main panel height +5px

        // TOP: Image area
        JPanel imagePanel = new JPanel(new BorderLayout());
        imagePanel.setBackground(new Color(245, 245, 245));
        imagePanel.setPreferredSize(new Dimension(260, 205));  // Image panel height +5px
        
        // Top buttons panel (heart and upload)
        JPanel topButtonsPanel = new JPanel(new BorderLayout());
        topButtonsPanel.setOpaque(false);
        
        JButton heartButton = new JButton("\u2665");
        heartButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        heartButton.setForeground(new Color(255, 89, 89));
        heartButton.setContentAreaFilled(false);
        heartButton.setBorderPainted(false);
        heartButton.setFocusPainted(false);
        
        JButton uploadButton = new JButton("\u2B71");
        uploadButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        uploadButton.setForeground(PRIMARY_COLOR);
        uploadButton.setContentAreaFilled(false);
        uploadButton.setBorderPainted(false);
        uploadButton.setFocusPainted(false);
        uploadButton.setToolTipText("Upload Image");
        uploadButton.addActionListener(e -> showImageUploadDialog(id));
        
        JPanel heartPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        heartPanel.setOpaque(false);
        heartPanel.add(heartButton);
        
        JPanel uploadPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        uploadPanel.setOpaque(false);
        uploadPanel.add(uploadButton);
        
        topButtonsPanel.add(uploadPanel, BorderLayout.WEST);
        topButtonsPanel.add(heartPanel, BorderLayout.EAST);
        imagePanel.add(topButtonsPanel, BorderLayout.NORTH);
        
        loadProductImage(imagePanel, id);
        panel.add(imagePanel, BorderLayout.NORTH);

        // CENTER: Content panel with name, description, rating, and price
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBackground(Color.WHITE);
        contentPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 20, 15));  // Increased bottom padding

        JLabel nameLabel = new JLabel(name);
        nameLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        nameLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel descLabel = new JLabel(description);
        descLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        descLabel.setForeground(Color.GRAY);
        descLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

        // Price panel
        JPanel pricePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 2, 0));
        pricePanel.setBackground(Color.WHITE);
        pricePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel priceLabel = new JLabel("$" + df.format(price));
        priceLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        priceLabel.setForeground(PRIMARY_COLOR);
        pricePanel.add(priceLabel);

        contentPanel.add(nameLabel);
        contentPanel.add(Box.createVerticalStrut(5));
        contentPanel.add(descLabel);
        contentPanel.add(Box.createVerticalStrut(5));
        contentPanel.add(pricePanel);
        
        panel.add(contentPanel, BorderLayout.CENTER);

        // BOTTOM: Add to cart button
        JPanel buttonPanel = new JPanel(new BorderLayout());
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 15, 15, 15));
        
        JButton addButton = new JButton("\u002B Add to cart");
        addButton.setFont(new Font("Segoe UI", Font.BOLD, 12));
        addButton.setForeground(Color.WHITE);
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        addButton.setFocusPainted(false);
        addButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        addButton.addActionListener(e -> addItemToCart(name, price));
        
        buttonPanel.add(addButton, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    private void addItemToCart(String name, double price) {
        // Check if item already exists in cart
        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            if (cartTableModel.getValueAt(i, 0).equals(name)) {
                int qty = (int) cartTableModel.getValueAt(i, 2);
                double subtotal = price * (qty + 1);
                cartTableModel.setValueAt(qty + 1, i, 2);
                cartTableModel.setValueAt(subtotal, i, 3);
                updateTotal();
                return;
            }
        }

        // Add new item with delete symbol
        cartTableModel.addRow(new Object[]{name, price, 1, price, "\u2715", "+", "-"});
        updateTotal();
    }

    private void removeFromCart() {
        int selectedRow = cartTable.getSelectedRow();
        if (selectedRow >= 0) {
            cartTableModel.removeRow(selectedRow);
            updateTotal();
        }
    }

    private void clearCart() {
        cartTableModel.setRowCount(0);
        updateTotal();
        // Reset payment method selection when cart is cleared
        selectedPaymentMethod = null;
        confirmBtn.setEnabled(false);
        // Reset payment button styles
        JPanel paymentPanel = (JPanel)confirmBtn.getParent().getComponent(1);
        for (Component c : paymentPanel.getComponents()) {
            if (c instanceof JButton) {
                JButton b = (JButton)c;
                b.setBackground(Color.WHITE);
                b.setForeground(TEXT_COLOR);
            }
        }
    }

    private void updateTotal() {
        total = 0.0;
        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            total += (double) cartTableModel.getValueAt(i, 3);
        }
        double vat = total * getVatRate();
        double tax = total * getTaxRate();
        double grandTotal = total + vat + tax;
        double discount = grandTotal * getDiscountRate();
        double finalTotal = grandTotal - discount;
        // Update breakdown labels
        subtotalLabel.setText("Subtotal: $" + df.format(total));
        vatBreakdownLabel.setText(String.format("VAT (%.0f%%): $%s", getVatRate()*100, df.format(vat)));
        taxBreakdownLabel.setText(String.format("Tax (%.0f%%): $%s", getTaxRate()*100, df.format(tax)));
        String discountType = pwdRadio.isSelected() ? "PWD" : seniorRadio.isSelected() ? "Senior" : "";
        discountBreakdownLabel.setText(discountType.isEmpty() ? "Discount: -$0.00" : String.format("%s Discount (%.0f%%): -$%s", discountType, getDiscountRate()*100, df.format(discount)));
        grandTotalBreakdownLabel.setText("Grand Total: $" + df.format(finalTotal));
    }

    private JLabel getOrCreateLabel(JPanel panel, String name) {
        for (Component c : panel.getComponents()) {
            if (c instanceof JLabel && name.equals(c.getName())) return (JLabel)c;
        }
        JLabel label = new JLabel();
        label.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        label.setForeground(Color.GRAY);
        label.setName(name);
        panel.add(label);
        return label;
    }

    private double getVatRate() {
        try { return Double.parseDouble(vatField.getText()) / 100.0; } catch (Exception e) { return 0.12; }
    }

    private double getTaxRate() {
        try { return Double.parseDouble(taxField.getText()) / 100.0; } catch (Exception e) { return 0.10; }
    }

    private double getDiscountRate() {
        if (pwdRadio.isSelected()) {
            try { return Double.parseDouble(pwdPercentField.getText()) / 100.0; } catch (Exception e) { return 0.20; }
        } else if (seniorRadio.isSelected()) {
            try { return Double.parseDouble(seniorPercentField.getText()) / 100.0; } catch (Exception e) { return 0.20; }
        }
        return 0.0;
    }

    private void confirmPayment() {
        if (cartTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Cart is empty!");
            return;
        }

        if (selectedPaymentMethod == null) {
            JOptionPane.showMessageDialog(this, "Please select payment method!");
            return;
        }

        // Calculate final total including VAT, tax, and discounts
        double vat = total * getVatRate();
        double tax = total * getTaxRate();
        double grandTotal = total + vat + tax;
        double discount = grandTotal * getDiscountRate();
        double finalTotal = grandTotal - discount;

        // Ask for cash amount
        String cashInput = JOptionPane.showInputDialog(
            this,
            String.format("Total Amount: $%.2f\nEnter cash amount:", finalTotal),
            "Enter Cash Amount",
            JOptionPane.PLAIN_MESSAGE
        );

        if (cashInput == null) {
            return; // User cancelled
        }

        try {
            double cashAmount = Double.parseDouble(cashInput);
            if (cashAmount < finalTotal) {
                JOptionPane.showMessageDialog(this,
                    "Insufficient cash amount. Please enter an amount greater than or equal to the total.",
                    "Invalid Amount",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            double change = cashAmount - finalTotal;

            // Show confirmation dialog with change information
            int choice = JOptionPane.showConfirmDialog(
                this,
                String.format("Total Amount: $%.2f\nCash Received: $%.2f\nChange: $%.2f\n\nConfirm payment?",
                    finalTotal, cashAmount, change),
                "Confirm Payment",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            if (choice == JOptionPane.YES_OPTION) {
                try {
                    if (cartTableModel.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(this, "Cart is empty!");
                        return;
                    }

                    Connection conn = getConnection();
                    conn.setAutoCommit(false);

                    // First check stock availability for all items
                    boolean stockAvailable = true;
                    StringBuilder unavailableItems = new StringBuilder();

                    for (int i = 0; i < cartTableModel.getRowCount(); i++) {
                        String productName = (String) cartTableModel.getValueAt(i, 0);
                        int requestedQty = (int) cartTableModel.getValueAt(i, 2);

                        PreparedStatement checkStockPstmt = conn.prepareStatement(
                            "SELECT product_id, stock_quantity FROM products WHERE product_name = ?"
                        );
                        checkStockPstmt.setString(1, productName);
                        ResultSet stockRs = checkStockPstmt.executeQuery();

                        if (stockRs.next()) {
                            int currentStock = stockRs.getInt("stock_quantity");
                            if (currentStock < requestedQty) {
                                stockAvailable = false;
                                unavailableItems.append(productName)
                                              .append(" (Available: ")
                                              .append(currentStock)
                                              .append(")\n");
                            }
                        }
                        stockRs.close();
                        checkStockPstmt.close();
                    }

                    if (!stockAvailable) {
                        conn.close();
                        JOptionPane.showMessageDialog(this, 
                            "The following items have insufficient stock:\n" + unavailableItems.toString(),
                            "Insufficient Stock",
                            JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    // Create sale record
                    PreparedStatement salePstmt = conn.prepareStatement(
                        "INSERT INTO sales (user_id, total_amount, payment_method) VALUES (?, ?, ?)",
                        Statement.RETURN_GENERATED_KEYS
                    );
                    salePstmt.setInt(1, getUserId());
                    salePstmt.setDouble(2, finalTotal);
                    salePstmt.setString(3, selectedPaymentMethod);
                    salePstmt.executeUpdate();

                    ResultSet rs = salePstmt.getGeneratedKeys();
                    int saleId = 0;
                    if (rs.next()) {
                        saleId = rs.getInt(1);
                    }

                    // Process each item
                    for (int i = 0; i < cartTableModel.getRowCount(); i++) {
                        String productName = (String) cartTableModel.getValueAt(i, 0);
                        double price = (double) cartTableModel.getValueAt(i, 1);
                        int quantity = (int) cartTableModel.getValueAt(i, 2);

                        // Get product ID and update stock
                        PreparedStatement pstmt = conn.prepareStatement(
                            "SELECT product_id FROM products WHERE product_name = ?"
                        );
                        pstmt.setString(1, productName);
                        ResultSet productRs = pstmt.executeQuery();

                        if (productRs.next()) {
                            int productId = productRs.getInt("product_id");

                            // Create sale item
                            PreparedStatement saleItemPstmt = conn.prepareStatement(
                                "INSERT INTO sale_items (sale_id, product_id, quantity, unit_price, subtotal) " +
                                "VALUES (?, ?, ?, ?, ?)"
                            );
                            saleItemPstmt.setInt(1, saleId);
                            saleItemPstmt.setInt(2, productId);
                            saleItemPstmt.setInt(3, quantity);
                            saleItemPstmt.setDouble(4, price);
                            saleItemPstmt.setDouble(5, price * quantity);
                            saleItemPstmt.executeUpdate();

                            // Update inventory
                            PreparedStatement updatePstmt = conn.prepareStatement(
                                "UPDATE products SET stock_quantity = stock_quantity - ? WHERE product_id =?"
                            );
                            updatePstmt.setInt(1, quantity);
                            updatePstmt.setInt(2, productId);
                            updatePstmt.executeUpdate();
                            
                            updatePstmt.close();
                            saleItemPstmt.close();
                        }
                        productRs.close();
                        pstmt.close();
                    }

                    conn.commit();
                    conn.close();

                    // Show receipt with change information
                    showReceipt(saleId, cashAmount, change);

                    // Clear cart
                    clearCart();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error processing payment: " + e.getMessage());
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "Invalid cash amount. Please enter a valid number.",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showReceipt(int saleId, double cashAmount, double change) {
        // Create receipt window
        JDialog receiptDialog = new JDialog(this, "Receipt", true);
        receiptDialog.setLayout(new BorderLayout());
        receiptDialog.setSize(300, 500);
        receiptDialog.setLocationRelativeTo(this);

        // Receipt content
        JTextArea receiptText = new JTextArea();
        receiptText.setFont(new Font("Monospaced", Font.PLAIN, 12));
        receiptText.setEditable(false);
        receiptText.setMargin(new Insets(10, 10, 10, 10));

        // Build receipt content
        StringBuilder receipt = new StringBuilder();
        receipt.append("         RESTAURANT NAME\n");
        receipt.append("================================\n\n");
        receipt.append("Receipt #: ").append(saleId).append("\n");
        receipt.append("Date: ").append(new java.util.Date()).append("\n");
        receipt.append("--------------------------------\n");
        receipt.append(String.format("%-20s %5s %7s\n", "Item", "Qty", "Price"));
        receipt.append("--------------------------------\n");

        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            String item = (String) cartTableModel.getValueAt(i, 0);
            int qty = (int) cartTableModel.getValueAt(i, 2);
            double subtotal = (double) cartTableModel.getValueAt(i, 3);
            receipt.append(String.format("%-20s %5d %7.2f\n", item, qty, subtotal));
        }

        receipt.append("--------------------------------\n");
        receipt.append(String.format("Subtotal: $%7.2f\n", total));
        double vat = total * getVatRate();
        double tax = total * getTaxRate();
        double grandTotal = total + vat + tax;
        double discount = grandTotal * getDiscountRate();
        String discountTypeReceipt = pwdRadio.isSelected() ? "PWD" : seniorRadio.isSelected() ? "Senior" : "";
        if (getDiscountRate() > 0) {
            receipt.append(String.format("%s Discount (%.0f%%): -$%7.2f\n", discountTypeReceipt, getDiscountRate()*100, discount));
        }
        receipt.append(String.format("Grand Total: $%7.2f\n", grandTotal - discount));
        receipt.append("--------------------------------\n");
        receipt.append(String.format("Cash Amount: $%7.2f\n", cashAmount));
        receipt.append(String.format("Change: $%7.2f\n", change));
        receipt.append("================================\n");
        receipt.append("      Thank you for dining!\n");
        receipt.append("        Please come again!\n");

        receiptText.setText(receipt.toString());
        receiptDialog.add(new JScrollPane(receiptText), BorderLayout.CENTER);

        // Print button
        JButton printButton = new JButton("\u2399 Print"); // Print screen symbol
        printButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        printButton.addActionListener(e -> {
            try {
                receiptText.print();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error printing receipt: " + ex.getMessage());
            }
        });
        receiptDialog.add(printButton, BorderLayout.SOUTH);

        receiptDialog.setVisible(true);
    }

    private Connection getConnection() throws Exception {
        String url = "jdbc:mysql://localhost:3306/java_user_database";
        String username = "root";
        String password = "";
        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(url, username, password);
    }

    private int getUserId() {
        return userId;
    }

    private void logout() {
        Login LoginFrame = new Login();
        LoginFrame.setVisible(true);
        LoginFrame.pack();
        LoginFrame.setLocationRelativeTo(null);
        this.dispose();
    }

    private void showProductManagement() {
        ProductManagement productFrame = new ProductManagement(this);
        productFrame.setVisible(true);
        // Add window listener to refresh products when the management window is closed
        productFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                refreshProducts();
            }
        });
    }
    
    private void showSalesHistory() {
        // Show password dialog
        JPasswordField passwordField = new JPasswordField();
        passwordField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.add(new JLabel("Enter Authorization Password:"), BorderLayout.NORTH);
        panel.add(passwordField, BorderLayout.CENTER);
        
        int result = JOptionPane.showConfirmDialog(
            this,
            panel,
            "Authorization Required",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            String password = new String(passwordField.getPassword());
            if ("GCOMPANY".equals(password)) {
                SalesHistory salesFrame = new SalesHistory();
                salesFrame.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(
                    this,
                    "Invalid password. Access denied.",
                    "Authorization Failed",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }

    private void loadCategories() {
        try {
            Connection conn = getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT category_name FROM categories ORDER BY category_name");

            while (rs.next()) {
                String category = rs.getString("category_name");
                JButton catButton = createCategoryButton(category);
                categoryPanel.add(catButton);

                // Create and add menu items panel for this category
                JPanel menuItemsPanel = createMenuItemsPanel(category);
                menuCardsPanel.add(menuItemsPanel, category);
            }

            rs.close();
            stmt.close();
            conn.close();

            // Show first category if exists
            if (categoryPanel.getComponentCount() > 0) {
                ((JButton)categoryPanel.getComponent(0)).doClick();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading categories: " + e.getMessage());
        }
    }

    private JPanel createMenuItemsPanel(String category) {
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(Color.WHITE);
        
        // Create a wrapper panel with adjusted padding
        JPanel wrapperPanel = new JPanel();
        wrapperPanel.setLayout(new BoxLayout(wrapperPanel, BoxLayout.Y_AXIS));
        wrapperPanel.setBackground(Color.WHITE);
        wrapperPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0)); // Remove side padding

        // Create a panel to hold rows of products with center alignment
        JPanel productsPanel = new JPanel();
        productsPanel.setLayout(new BoxLayout(productsPanel, BoxLayout.Y_AXIS));
        productsPanel.setBackground(Color.WHITE);
        productsPanel.setAlignmentX(Component.CENTER_ALIGNMENT); // Center the panel

        try {
            Vector<Object[]> products = new Vector<>();
            
            Connection conn = getConnection();
            PreparedStatement pstmt = conn.prepareStatement(
                "SELECT product_id, product_name, price, description FROM products WHERE category = ? ORDER BY product_id"
            );
            pstmt.setString(1, category);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                products.add(new Object[]{
                    rs.getInt("product_id"),
                    rs.getString("product_name"),
                    rs.getDouble("price"),
                    rs.getString("description")
                });
            }

            // Calculate grid dimensions
            int totalProducts = products.size();
            int productsPerRow = 4;
            int rows = (totalProducts + productsPerRow - 1) / productsPerRow;

            // Create rows with center alignment
            for (int row = 0; row < rows; row++) {
                JPanel currentRow = new JPanel();
                currentRow.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 20)); // Center alignment with spacing
                currentRow.setBackground(Color.WHITE);
                currentRow.setMaximumSize(new Dimension(1200, 380)); // Control max width and height
                currentRow.setAlignmentX(Component.CENTER_ALIGNMENT); // Center align the row

                // Add products to this row
                for (int col = 0; col < productsPerRow; col++) {
                    int index = row * productsPerRow + col;
                    if (index < products.size()) {
                        Object[] product = products.get(index);
                        JPanel itemPanel = createMenuItemPanel(
                            (Integer)product[0],
                            (String)product[1],
                            (Double)product[2],
                            (String)product[3]
                        );
                        currentRow.add(itemPanel);
                    }
                }

                productsPanel.add(currentRow);
                if (row < rows - 1) {
                    productsPanel.add(Box.createVerticalStrut(10)); // Space between rows
                }
            }

            rs.close();
            pstmt.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading menu items: " + e.getMessage());
        }

        // Center the products panel
        JPanel centeringPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
        centeringPanel.setBackground(Color.WHITE);
        centeringPanel.add(productsPanel);
        wrapperPanel.add(centeringPanel);

        // Wrap in scroll pane
        JScrollPane scrollPane = new JScrollPane(wrapperPanel);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        scrollPane.getViewport().setBackground(Color.WHITE);
        
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        return mainPanel;
    }

    private JPanel createCartPanel() {
        JPanel panel = new JPanel(new BorderLayout(0, 10));
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 1, 0, 0, BORDER_COLOR),
            BorderFactory.createEmptyBorder(20, 20, 20, 20)
        ));

        // Cart header
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(Color.WHITE);
        
        // Center the "My Order" text
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titlePanel.setBackground(Color.WHITE);
        JLabel cartTitle = new JLabel("ORDER LIST");
        cartTitle.setFont(new Font("Segoe UI", Font.BOLD, 20));
        cartTitle.setForeground(TEXT_COLOR);
        titlePanel.add(cartTitle);
        headerPanel.add(titlePanel, BorderLayout.CENTER);
        
        // Clear button
        JButton clearButton = new JButton("\u2715"); // Multiplication X
        clearButton.setFont(new Font("Segoe UI", Font.PLAIN, 18));
        clearButton.setForeground(new Color(255, 89, 89)); // Soft red
        clearButton.setContentAreaFilled(false);
        clearButton.setBorderPainted(false);
        clearButton.setFocusPainted(false);
        clearButton.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(
                Home.this,
                "Are you sure you want to clear the entire cart?",
                "Confirm Clear Cart",
                JOptionPane.YES_NO_OPTION
            );
            if (confirm == JOptionPane.YES_OPTION) {
                clearCart();
            }
        });
        headerPanel.add(clearButton, BorderLayout.EAST);
        
        // Void button
        JButton voidButton = new JButton("Void Order");
        voidButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        voidButton.setForeground(Color.WHITE);
        voidButton.setBackground(new Color(255, 89, 89));
        voidButton.setFocusPainted(false);
        voidButton.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(
                Home.this,
                "Are you sure you want to void this order?",
                "Void Order",
                JOptionPane.YES_NO_OPTION
            );
            if (confirm == JOptionPane.YES_OPTION) {
                String reason = JOptionPane.showInputDialog(
                    Home.this,
                    "Enter reason for voiding the order:",
                    "Void Reason",
                    JOptionPane.PLAIN_MESSAGE
                );
                clearCart();
                JOptionPane.showMessageDialog(
                    Home.this,
                    "Order voided. Reason: " + (reason != null ? reason : "No reason provided."),
                    "Order Voided",
                    JOptionPane.INFORMATION_MESSAGE
                );
            }
        });
        headerPanel.add(voidButton, BorderLayout.SOUTH);
        
        panel.add(headerPanel, BorderLayout.NORTH);

        // Cart items
        cartTableModel = new DefaultTableModel(
            new Object[]{"Item", "Price", "Qty", "Subtotal", "", "+", "-"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        cartTable = new JTable(cartTableModel);
        cartTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        cartTable.setRowHeight(35);
        cartTable.setShowGrid(false);
        cartTable.setBackground(Color.WHITE);
        cartTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        cartTable.getTableHeader().setBackground(Color.WHITE);
        cartTable.getTableHeader().setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR));
        
        // Set up the delete column
        cartTable.getColumnModel().getColumn(4).setMaxWidth(50);
        cartTable.getColumnModel().getColumn(4).setMinWidth(50);
        cartTable.getColumnModel().getColumn(5).setMaxWidth(40);
        cartTable.getColumnModel().getColumn(5).setMinWidth(40);
        cartTable.getColumnModel().getColumn(6).setMaxWidth(40);
        cartTable.getColumnModel().getColumn(6).setMinWidth(40);
        
        // Add click listener for delete
        cartTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int column = cartTable.getColumnModel().getColumnIndexAtX(e.getX());
                int row = e.getY() / cartTable.getRowHeight();

                if (row < cartTable.getRowCount() && row >= 0) {
                    if (column == 4) {
                        int confirm = JOptionPane.showConfirmDialog(
                            Home.this,
                            "Are you sure you want to remove this item from the cart?",
                            "Confirm Delete",
                            JOptionPane.YES_NO_OPTION
                        );
                        if (confirm == JOptionPane.YES_OPTION) {
                            cartTableModel.removeRow(row);
                            updateTotal();
                        }
                    } else if (column == 5) {
                        int qty = (int) cartTableModel.getValueAt(row, 2);
                        double price = (double) cartTableModel.getValueAt(row, 1);
                        qty++;
                        cartTableModel.setValueAt(qty, row, 2);
                        cartTableModel.setValueAt(price * qty, row, 3);
                        updateTotal();
                    } else if (column == 6) {
                        int qty = (int) cartTableModel.getValueAt(row, 2);
                        double price = (double) cartTableModel.getValueAt(row, 1);
                        qty--;
                        if (qty <= 0) {
                            int confirm = JOptionPane.showConfirmDialog(
                                Home.this,
                                "Quantity is 0. Remove this item from the cart?",
                                "Confirm Remove",
                                JOptionPane.YES_NO_OPTION
                            );
                            if (confirm == JOptionPane.YES_OPTION) {
                                cartTableModel.removeRow(row);
                                updateTotal();
                            }
                        } else {
                            cartTableModel.setValueAt(qty, row, 2);
                            cartTableModel.setValueAt(price * qty, row, 3);
                            updateTotal();
                        }
                    }
                }
            }
        });
        
        JScrollPane scrollPane = new JScrollPane(cartTable);
        scrollPane.setBorder(null);
        scrollPane.getViewport().setBackground(Color.WHITE);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Bottom panel
        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        bottomPanel.setBackground(Color.WHITE);
        bottomPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));

        // Breakdown panel for subtotal, VAT, tax, discount, grand total
        JPanel breakdownPanel = new JPanel();
        breakdownPanel.setLayout(new BoxLayout(breakdownPanel, BoxLayout.Y_AXIS));
        breakdownPanel.setBackground(Color.WHITE);
        breakdownPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

        // Subtotal
        subtotalLabel = new JLabel("Subtotal: $0.00");
        subtotalLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        subtotalLabel.setForeground(TEXT_COLOR);
        breakdownPanel.add(subtotalLabel);

        // VAT
        vatBreakdownLabel = new JLabel("VAT (12%): $0.00");
        vatBreakdownLabel.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        vatBreakdownLabel.setForeground(Color.GRAY);
        breakdownPanel.add(vatBreakdownLabel);

        // Tax
        taxBreakdownLabel = new JLabel("Tax (10%): $0.00");
        taxBreakdownLabel.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        taxBreakdownLabel.setForeground(Color.GRAY);
        breakdownPanel.add(taxBreakdownLabel);

        // Discount
        discountBreakdownLabel = new JLabel("Discount: -$0.00");
        discountBreakdownLabel.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        discountBreakdownLabel.setForeground(new Color(0, 153, 76));
        breakdownPanel.add(discountBreakdownLabel);

        // Grand Total
        grandTotalBreakdownLabel = new JLabel("Grand Total: $0.00");
        grandTotalBreakdownLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        grandTotalBreakdownLabel.setForeground(PRIMARY_COLOR);
        breakdownPanel.add(grandTotalBreakdownLabel);

        bottomPanel.add(breakdownPanel);

        // Payment methods
        JPanel paymentPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        paymentPanel.setBackground(Color.WHITE);
        
        // Cash button
        JButton cashBtn = new JButton("\u0024 Cash"); // Dollar sign
        styleButton(cashBtn, false);
        
        // Add action listeners for payment method selection
        cashBtn.addActionListener(e -> {
            selectedPaymentMethod = "Cash";
            cashBtn.setBackground(PRIMARY_COLOR);
            cashBtn.setForeground(Color.WHITE);
            confirmBtn.setEnabled(true);
        });
        
        paymentPanel.add(cashBtn);
        
        bottomPanel.add(paymentPanel, BorderLayout.CENTER);

        // VAT/tax panel
        JPanel vatTaxPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        vatTaxPanel.setBackground(Color.WHITE);
        JLabel vatLabel = new JLabel("VAT (%):");
        vatField = new JTextField("12", 3);
        JLabel taxLabel = new JLabel("Tax (%):");
        taxField = new JTextField("10", 3);
        vatTaxPanel.add(vatLabel);
        vatTaxPanel.add(vatField);
        vatTaxPanel.add(taxLabel);
        vatTaxPanel.add(taxField);

        // Discount section with Normal, PWD, Senior radio buttons
        JPanel discountPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        discountPanel.setBackground(Color.WHITE);
        JRadioButton normalRadio = new JRadioButton("Normal");
        normalRadio.setSelected(true);
        pwdRadio = new JRadioButton("PWD");
        seniorRadio = new JRadioButton("Senior");
        ButtonGroup discountGroup = new ButtonGroup();
        discountGroup.add(normalRadio);
        discountGroup.add(pwdRadio);
        discountGroup.add(seniorRadio);
        JLabel pwdLabel = new JLabel("PWD Discount (%):");
        pwdPercentField = new JTextField("20", 3);
        JLabel seniorLabel = new JLabel("Senior Discount (%):");
        seniorPercentField = new JTextField("20", 3);
        discountPanel.add(normalRadio);
        discountPanel.add(pwdRadio);
        discountPanel.add(pwdLabel);
        discountPanel.add(pwdPercentField);
        discountPanel.add(seniorRadio);
        discountPanel.add(seniorLabel);
        discountPanel.add(seniorPercentField);

        // Listeners to update total
        normalRadio.addActionListener(e -> updateTotal());
        pwdRadio.addActionListener(e -> updateTotal());
        seniorRadio.addActionListener(e -> updateTotal());
        vatField.addActionListener(e -> updateTotal());
        taxField.addActionListener(e -> updateTotal());
        pwdPercentField.addActionListener(e -> updateTotal());
        seniorPercentField.addActionListener(e -> updateTotal());
        vatField.addKeyListener(new java.awt.event.KeyAdapter() { public void keyReleased(java.awt.event.KeyEvent e) { updateTotal(); }});
        taxField.addKeyListener(new java.awt.event.KeyAdapter() { public void keyReleased(java.awt.event.KeyEvent e) { updateTotal(); }});
        pwdPercentField.addKeyListener(new java.awt.event.KeyAdapter() { public void keyReleased(java.awt.event.KeyEvent e) { updateTotal(); }});
        seniorPercentField.addKeyListener(new java.awt.event.KeyAdapter() { public void keyReleased(java.awt.event.KeyEvent e) { updateTotal(); }});

        // Stack VAT/tax and discount panels at the top
        JPanel topInputsPanel = new JPanel();
        topInputsPanel.setLayout(new BoxLayout(topInputsPanel, BoxLayout.Y_AXIS));
        topInputsPanel.setBackground(Color.WHITE);
        topInputsPanel.add(vatTaxPanel);
        topInputsPanel.add(discountPanel);
        bottomPanel.add(topInputsPanel, BorderLayout.NORTH);

        // Confirm button
        confirmBtn = new JButton("\u2714 Confirm"); // Heavy checkmark
        confirmBtn.setFont(new Font("Segoe UI", Font.BOLD, 14));
        confirmBtn.setForeground(Color.WHITE);
        confirmBtn.setBackground(PRIMARY_COLOR);
        confirmBtn.setBorder(null);
        confirmBtn.setPreferredSize(new Dimension(0, 45));
        confirmBtn.setFocusPainted(false);
        confirmBtn.setEnabled(false);
        confirmBtn.addActionListener(e -> confirmPayment());
        
        bottomPanel.add(confirmBtn, BorderLayout.SOUTH);
        
        panel.add(bottomPanel, BorderLayout.SOUTH);

        return panel;
    }

    // Add refresh method
    public void refreshProducts() {
        // Clear existing panels
        categoryPanel.removeAll();
        menuCardsPanel.removeAll();
        
        // Reload categories and products
        loadCategories();
        
        // Refresh the UI
        categoryPanel.revalidate();
        categoryPanel.repaint();
        menuCardsPanel.revalidate();
        menuCardsPanel.repaint();
    }

    // Add new method for handling image uploads
    private void uploadProductImage(int productId, File imageFile) {
        try {
            // Create images/products directory if it doesn't exist
            File directory = new File("src/images/products");
            if (!directory.exists()) {
                directory.mkdirs();
            }

            // Read the source image
            BufferedImage sourceImage = ImageIO.read(imageFile);
            if (sourceImage == null) {
                throw new IOException("Failed to read image file");
            }

            // Create a new buffered image with the exact dimensions we want
            BufferedImage scaledImage = new BufferedImage(260, 200, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = scaledImage.createGraphics();
            try {
                // Set rendering hints for better quality
                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // Fill background with white
                g2d.setColor(Color.WHITE);
                g2d.fillRect(0, 0, 260, 200);

                // Calculate dimensions to maintain aspect ratio
                double scale = Math.min(260.0 / sourceImage.getWidth(), 200.0 / sourceImage.getHeight());
                int scaledWidth = (int) (sourceImage.getWidth() * scale);
                int scaledHeight = (int) (sourceImage.getHeight() * scale);
                int x = (260 - scaledWidth) / 2;
                int y = (200 - scaledHeight) / 2;

                // Draw the image centered
                g2d.drawImage(sourceImage, x, y, scaledWidth, scaledHeight, null);
            } finally {
                g2d.dispose();
            }

            // Save the scaled image
            String targetPath = String.format("src/images/products/%d.jpg", productId);
            ImageIO.write(scaledImage, "jpg", new File(targetPath));

            // Show success message
            JOptionPane.showMessageDialog(this,
                "Image uploaded successfully!",
                "Upload Complete",
                JOptionPane.INFORMATION_MESSAGE);

            // Refresh the display immediately
            SwingUtilities.invokeLater(this::refreshProducts);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, 
                "Error uploading image: " + e.getMessage(),
                "Upload Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private JLabel createImageLabel(Image image) {
        // Scale image maintaining aspect ratio
        double scale = Math.min(260.0 / image.getWidth(null), 200.0 / image.getHeight(null));
        int scaledWidth = (int) (image.getWidth(null) * scale);
        int scaledHeight = (int) (image.getHeight(null) * scale);
        
        Image scaledImage = image.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
        JLabel imageLabel = new JLabel(new ImageIcon(scaledImage));
        imageLabel.setHorizontalAlignment(JLabel.CENTER);
        imageLabel.setVerticalAlignment(JLabel.CENTER);
        
        // Set preferred size to ensure consistent sizing
        imageLabel.setPreferredSize(new Dimension(260, 200));
        return imageLabel;
    }

    private void loadProductImage(JPanel imagePanel, int id) {
        try {
            String productImagePath = String.format("src/images/products/%d.jpg", id);
            File imageFile = new File(productImagePath);
            
            if (imageFile.exists()) {
                BufferedImage img = ImageIO.read(imageFile);
                if (img != null) {
                    JLabel imageLabel = createImageLabel(img);
                    imagePanel.add(imageLabel, BorderLayout.CENTER);
                    return;
                }
            }
            
            // If product image doesn't exist or failed to load, try default image
            String defaultImagePath = "src/icon/default.jpg";
            File defaultFile = new File(defaultImagePath);
            if (defaultFile.exists()) {
                BufferedImage img = ImageIO.read(defaultFile);
                if (img != null) {
                    JLabel imageLabel = createImageLabel(img);
                    imagePanel.add(imageLabel, BorderLayout.CENTER);
                    return;
                }
            }
            
            // If both images fail, show placeholder
            showPlaceholder(imagePanel);
            
        } catch (IOException e) {
            showPlaceholder(imagePanel);
        }
    }

    private void showPlaceholder(JPanel imagePanel) {
        JPanel placeholderPanel = new JPanel();
        placeholderPanel.setLayout(new BoxLayout(placeholderPanel, BoxLayout.Y_AXIS));
        placeholderPanel.setBackground(new Color(245, 245, 245));
        placeholderPanel.setPreferredSize(new Dimension(260, 200));
        
        JLabel placeholder = new JLabel("\u2617"); // Placeholder symbol
        placeholder.setFont(new Font("Segoe UI", Font.PLAIN, 48));
        placeholder.setForeground(new Color(200, 200, 200));
        placeholder.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel uploadText = new JLabel("Click \u2B71 to upload image");
        uploadText.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        uploadText.setForeground(new Color(150, 150, 150));
        uploadText.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        placeholderPanel.add(Box.createVerticalGlue());
        placeholderPanel.add(placeholder);
        placeholderPanel.add(Box.createVerticalStrut(10));
        placeholderPanel.add(uploadText);
        placeholderPanel.add(Box.createVerticalGlue());
        
        imagePanel.add(placeholderPanel, BorderLayout.CENTER);
    }

    // Add method to show image upload dialog
    private void showImageUploadDialog(int productId) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));
        
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            uploadProductImage(productId, selectedFile);
            refreshProducts(); // Refresh to show new image
        }
    }
}
